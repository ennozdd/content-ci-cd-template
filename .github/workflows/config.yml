name: XSOAR CI/CD
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: XSOAR CI/CD pull_request checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v8
      - name: Prepare Venv
        run: |

          poetry install --with ci
          poetry run demisto-sdk --version

          # Install node packages
          npm install .
          git config diff.renameLimit 6000
      - name: Prepare Environment
        env:
          REF: ${{ github.ref }}
        run: |
          echo "PATH=/home/runner/.local/bin:$PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=${GITHUB_WORKSPACE}:${PYTHONPATH}" >> $GITHUB_ENV
          echo "DEMISTO_README_VALIDATION=false" >> $GITHUB_ENV
          echo "DEMISTO_SDK_GITHUB_TOKEN=<your-github-token>" >> $GITHUB_ENV

      - name: Validate Files and Yaml
        if: always()
        run: |
          # Run validate on all changed files
          # You can choose what validations to use in the .demisto-sdk-conf file
          poetry run demisto-sdk validate  --no-docker-checks -g

      - name: Prepare Venv
        run: |
          cd $GITHUB_WORKSPACE/content/

          if [ ! -e "venv" ]; then
            echo "installing venv";
            NO_HOOKS=1 SETUP_PY2=no .hooks/bootstrap

            source ${GITHUB_WORKSPACE}/content/.venv/bin/activate
            pip3 install -r ${GITHUB_WORKSPACE}/repository/requirements.txt
            demisto-sdk --version
          else
            echo "venv exists (from cache). activating"
            source ./.venv/bin/activate
          fi

          # Install node packages
          npm install .
          git config diff.renameLimit 6000
          echo "========== Build Parameters =========="
          python3 --version
          demisto-sdk --version
      - name: Create ID Set
        run: |
          if [ $PACKS_CHANGED ]; then
            cd $GITHUB_WORKSPACE/repository/
            source $GITHUB_WORKSPACE/content/.venv/bin/activate

            # Download content's
            gsutil cp gs://marketplace-dist/content/id_set.json ./Tests/content-id_set.json

            # Create repository id-set
            demisto-sdk create-id-set

            # Merge id-sets and copy to artifacts folder
            demisto-sdk merge-id-sets -i1 ./Tests/id_set.json -i2 ./Tests/content-id_set.json -o ./Tests/id_set.json
            mkdir $ARTIFACTS_FOLDER
            cp "./Tests/id_set.json" "$ARTIFACTS_FOLDER/id_set.json"
          else
            echo "No packs has changed, skipping step."
          fi
      - name: Validate Files and Yaml
        if: always()
        run: |
          source $GITHUB_WORKSPACE/content/.venv/bin/activate

          cd $GITHUB_WORKSPACE/repository

          # Run validate on all changed files
          # You can choose what validations to use in the .demisto-sdk-conf file
          demisto-sdk validate --quiet-bc-validation --no-conf-json --allow-skipped
      - name: Run Unit Testing and Lint
        if: always()
        run: |
          source $GITHUB_WORKSPACE/content/.venv/bin/activate

          cd $GITHUB_WORKSPACE/repository

          # Copy necessary files
          cp $GITHUB_WORKSPACE/content/Tests/demistomock/demistomock.py ./
          cp $GITHUB_WORKSPACE/content/Tests/demistomock/demistomock.ps1 ./
          cp $GITHUB_WORKSPACE/content/Packs/Base/Scripts/CommonServerPython/CommonServerPython.py ./
          cp $GITHUB_WORKSPACE/content/Packs/Base/Scripts/CommonServerPowerShell/CommonServerPowerShell.ps1 ./
          mkdir -p ./dev_envs/pytest/
          cp $GITHUB_WORKSPACE/content/Tests/scripts/dev_envs/pytest/conftest.py ./dev_envs/pytest/

          # Run lint on all changed files
          # You can choose what lint checks to use in the .demisto-sdk-conf file
          demisto-sdk lint -g
      - name: Create Packs Artifacts
        run: |
          if [ $PACKS_CHANGED ]; then
            source $GITHUB_WORKSPACE/content/.venv/bin/activate

            cd $GITHUB_WORKSPACE/repository/
            for pack in Packs/*
            do
              demisto-sdk zip-packs --input $pack --output $ARTIFACTS_FOLDER
            done
          else
            echo "No packs has changed, skipping step."
          fi
      - name: Upload Packs to Artifacts Server
        env:
          REF: ${{ github.ref }}
        run : |
          if [ $PACKS_CHANGED ]; then
            BRANCH_NAME=${REF#refs/heads/}
            cd $GITHUB_WORKSPACE/repository/
            source $GITHUB_WORKSPACE/content/.venv/bin/activate

            # Select the way you want to install the packs on the machine, and remove the second part
            # For example: Choose the option 1 - UPLOAD TO ARTIFACTS SERVER OPTION, and remove the option 2 - UPLOAD DIRECTLY TO YOUR XSOAR MACHINE.
            # For more information - https://xsoar.pan.dev/docs/reference/articles/xsoar-ci-cd#to-deploy-content

            # 2. ========= UPLOAD DIRECTLY TO YOUR XSOAR MACHINE (WHEN MERGING TO MAIN REPO) =========

            if [ $BRANCH_NAME != master ]; then

              # Get the config_file
              CONFIG_FILE=${GITHUB_WORKSPACE}/repository/xsoar_config.json
              # Extract the Marketplace Packs section from the config_file
              MARKETPLACE_PACKS_LIST=$(cat $CONFIG_FILE | jq -r '.marketplace_packs')
              # Upload Custom Packs
              demisto-sdk upload --input-config-file  ${GITHUB_WORKSPACE}/repository/xsoar_config.json --insecure
              # Upload MarketPlace Packs
              python3 ${GITHUB_WORKSPACE}/repository/build_related_scripts/MarketPlaceInstallerFromCICD.py --marketplace-packs-list $MARKETPLACE_PACKS_LIST
            fi

          else
            echo "No packs has changed, skipping step."
          fi
